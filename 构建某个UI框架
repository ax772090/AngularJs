TinyUI框架实现原理
	开始加载index.html页面
	遇到样式类文件：framework.css、tiny.min.css等，加载解析这些样式文件
	遇到加载第三方库文件：tiny.3lib.all.js，加载执行这个文件
		说明：这个文件主要包含jquery、AngularJS、requireJS等第三方库
	遇到加载TinyUI组件文件：tiny.all.js，加载执行这个文件
	遇到框架入口文件：main.js，加载执行这个文件
		main.js中做了四件事：
			1.配置国际化语言：
			2.配置RequireJS的路径：
			3.加载framework.js文件：
				framework.js文件主要做了9件事：
					1.加载了一大堆文件：
						加载的文件分为几类：
							1.ui-router插件
							2.TinyUI组件国际化资源文件
								说明：这里取国际化资源文件的路径是在main.js中配置好的
							3.四个公共服务文件
								1.maskService
									功能：提供页面遮罩和正在加载图标。
									使用方法：将该服务依赖注入，然后调用show和hide方法
									注意：该服务是定义在framework模块上的。
								2.httpService
									功能：封装了ajax的功能，可以用来与后台交互
									使用方法:依赖注入该服务，然后调用post、get、delete等方法
									注意：该服务是定义在framework模块上的
								3.cookieService
									功能：提供了对cookie和本地存储的增、删、改、查功能
									使用方法：将服务依赖注入，然后调用对应的方法
									说明：该服务是定义在framework上边的
								4.commonServices
									功能：定义了commonServices模块，这个模块上保存一些公共服务，产品自定义的公共服务可以保存在这个模块上。同时在这个模块上定义了鉴权服务authService，用于对用户权限处理。
									使用方法：
										commonService模块上可以定义服务。
										authService服务通过依赖注入方式使用，其主要在framework.js文件中用到。
										注意：commonService模块在定义framework时，被依赖进去了。
							4.登录页面文件
								login.js文件主要做了5件事：
									1.定义login模块
									2.定义login状态
										说明：该状态激活时视图会显示在index.html页面的ui-view指令所在DOM内部
									3.定义登录页面内容部分控制器：loginContentCtrl
										说明：该控制器被配置给login路由状态
									4.定义登录页面头部内容对应的控制器：loginNavCtrl
										说明：该控制器在index.html中通过ng-controller方式声明其作用范围
									5.定义登录页面底部内容对应的控制器：loginFooterCtrll
										说明：该控制器在index.html中通过ng-controller方式声明其作用范围
								注意：login模块在定义framework模块时被依赖进入了。
							5.页头页脚控制器文件
								功能：设置index.html页面的页头、页脚视图对应的数据等内容
								说明：这两个控制器都是定义在framework模块上的。
							6.头部菜单列表服务文件
								功能：定义了头部菜单项的文本、对应的状态名、及整个项目模块的结构
								用法：这个主要在页头控制器topnavCtrl中使用，根据菜单列表生成了头部菜单，并将每个菜单DOM上通过uiSref指令与状态连接起来。
								说明：这个服务定义在framework模块上的。
								注意：当我们新增一个业务模块时，需要将新增的业务模块对应的菜单项配置到这个服务中。如果不配置，在头部菜单就没有对应模块的项。
							7.各个业务模块配置文件
								功能：
									1.定义该业务模块对应的AngularJS模块
										说明：该业务模块上的所有控制器和服务都定义在该AngularJS模块上边
									2.调用lazyLoadModule.makeLazy()方法，使当前模块具有懒加载功能。
										说明：lazyLoadModule.makeLazy方法主要作用是给当前模块上增加了几个方法，通过这几个方法定义的控制器、服务、指令等都具有懒加载特性。
									3.调用该模块上配置状态的方法tinyStateConfig对该业务中所有的路由状态进行配置
										通过tinyStateConfig方法配置的状态，不会立即加载状态对应的js文件，而是等到状态激活时才加载。（实际实现：通过给每个状态添加resolve配置参数实现的）
									4.返回模块实例
								注意1：在定义framework模块时，所有的业务模块都被依赖进去了。这样就将整个业务串联起来了。
								注意2：如果新增一个业务模块，必须将该模块添加到framework的依赖列表中。
						说明：都是一些服务、模块，这些服务和模块是整个项目的各个组成部分，然后将其定义在framework模块上或者依赖到framework模块中，从而，将整个页面链接到一起。
					2.设置TinyUI组件的国际化语言全局变量
						说明：这里同时对ngLocale模块进行了配置修改。
					3.定义了AngularJS模块framework
						说明：这个模块依赖了很多模块，通过这种依赖，将整个项目所有内容串联了起来。
					4.定义index.html页面头部和底部控制器
					5.定义四个公共服务
					6.配置默认路由状态位置：login
					8.配置整个系统的鉴权（通过绑定状态跳转开始事件实现）
					9.定义index.html中整个应用的控制器：appController
			4.加载完framework.js文件后，启动AngularJS应用：
				说明：启动模块时framework模块，而framework又依赖了整个项目所有的模块，这样就会加载项目中所有模块内容。
	结束
